-- vi: set syn=sql:
BEGIN;

CREATE SCHEMA t;
SET search_path TO t, tap, ordered1;

CREATE FUNCTION perform (anyelement) RETURNS void
    LANGUAGE sql VOLATILE
    AS $fn$
        SELECT $1;
        COMMENT ON FUNCTION perform (anyelement) IS NULL;
    $fn$;

CREATE FUNCTION intrp (INOUT str text, VARIADIC sub anyarray)
    LANGUAGE plpgsql STABLE
    AS $fn$
        BEGIN
            FOR i IN 1 .. array_length(sub, 1) LOOP
                -- regexp_replace since replace won't do just one
                str := regexp_replace(str, '%', sub[i]::text);
            END LOOP;
        END;
    $fn$;

CREATE FUNCTION btree_is (integer, integer, text, text) RETURNS text
    LANGUAGE sql VOLATILE
    AS $fn$
        SELECT bag_eq(
            $wnt$ SELECT * FROM btree $wnt$,
            intrp(
                $$ VALUES (0, array[%, %]::integer[], null), % $$,
                $1::text, $2::text, $3
            ),
            $4
        );
    $fn$;

CREATE FUNCTION btree_has (btree, text) RETURNS text
    LANGUAGE sql VOLATILE
    AS $fn$
        SELECT set_has(
            $$ SELECT * FROM btree $$,
            intrp('SELECT (%::btree).*', quote_literal($1)),
            $2
        );
    $fn$;

CREATE FUNCTION notthere (text, integer, text) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $fn$
        DECLARE
            s   bigint;
        BEGIN 
            s := currval('btree_id_seq');

            RETURN NEXT throws_ok(
                intrp('SELECT % (%)', $1, $2::text),
                'P0001', intrp('not in btree: %', $2),
                intrp('% (%) throws correct exception', $1, $3)
            );
            RETURN NEXT is(
                currval('btree_id_seq'), s,
                intrp('% (%) doesn''t inc sequence', $1, $3)
            );
            RETURN;
        END;
    $fn$;

SELECT no_plan();
SELECT reset_btree(8);

SELECT btree_is(1, 8, $$
    (1, '{}',   true)
$$,                             'initial empty btree');

SELECT is(insert(null), 2,  'insert returns next seq value');

SELECT btree_is(1, 8, $$
    (1, '{2}',      true)
$$,                         'inserted into root node');

SELECT perform(insert(null));
SELECT btree_is(1, 8, $$
    (1, '{2,3}',    true)
$$,                         'insert(null) inserts at end');

SELECT perform(insert(2));
SELECT btree_is(1, 8, $$
    (1, '{4,2,3}',  true)
$$,                         'insert(i) inserts before i');

SELECT notthere('insert', 5,    'not there');
SELECT notthere('insert', 1,    'root id');
SELECT notthere('insert', 8,    'root fill');

SELECT perform(insert(null)) FROM generate_series(1,4);
SELECT btree_is(1, 8, $$
    (1, '{4,2,3,5,6,7,8}',  true)
$$,                         '7 items will fit without splitting');

SELECT perform(insert(null));
SELECT btree_is(11, 8, $$
    (1,     '{6,7,8,9}',    true),
    (10,    '{4,2,3,5}',    true),
    (11,    '{10,1}',       false)
$$,                         '8 items will split');

SELECT notthere('insert', 10,   'non-root id');

SELECT perform(insert(2));
SELECT btree_has(
    (10, '{4,12,2,3,5}', true),
    'insert(i) finds the right child');

SELECT perform(insert(null));
SELECT btree_has(
    (1, '{6,7,8,9,13}', true),
    'insert(null) finds the right child');

SELECT perform(insert(null));
SELECT perform(insert(null));
SELECT perform(insert(null));
SELECT btree_is(11, 8, $$
    (1,     '{13,14,15,16}',    true),
    (17,    '{6,7,8,9}',        true),
    (10,    '{4,12,2,3,5}',     true),
    (11,    '{10,17,1}',        false)
$$,                         'overflow splits rather than stealing');

SELECT * FROM finish();
ROLLBACK;
